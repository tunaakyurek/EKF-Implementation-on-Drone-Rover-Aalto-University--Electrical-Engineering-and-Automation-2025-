%% PARAMETER COMPARISON TEST
% This script tests both optimized and original parameters and creates a comparison report

clear; clc; close all;

fprintf('=== EKF PARAMETER COMPARISON TEST ===\n\n');

%% Test 1: Current Optimized Parameters
fprintf('TEST 1: OPTIMIZED PARAMETERS (Random Search Results)\n');
fprintf('----------------------------------------------------\n');
fprintf('Parameters: Q_scale=1.377, R_gps=1.370, R_baro=0.956, R_mag=1.115, Q_att=0.926, P_scale=0.880\n');
fprintf('Running 30-second test...\n');

results_optimized = rapid_test_ekf('duration', 30, 'verbose', true);

% Store results
optimized_params = struct();
optimized_params.Q_scale = 1.377;
optimized_params.R_gps_scale = 1.370;
optimized_params.R_baro_scale = 0.956;
optimized_params.R_mag_scale = 1.115;
optimized_params.Q_att_scale = 0.926;
optimized_params.P_scale = 0.880;
optimized_params.results = results_optimized;

%% Revert to Original Parameters
fprintf('\n\nReverting to original parameters...\n');

% Comment out the optimized parameters section
fid = fopen('parameters.m', 'r');
content = fread(fid, '*char')';
fclose(fid);

% Replace the optimized section with commented version
old_section = '%% 5.1. APPLY OPTIMIZED PARAMETERS (Score: 5.715 - Much Better!)';
new_section = '%% 5.1. OPTIMIZED PARAMETERS (COMMENTED OUT FOR TESTING)';

if contains(content, old_section)
    content = strrep(content, old_section, new_section);
    
    % Comment out the parameter lines
    content = strrep(content, 'params.Q = params.Q * 1.377;', '% params.Q = params.Q * 1.377;');
    content = strrep(content, 'params.Q(7:9, 7:9) = params.Q(7:9, 7:9) * 0.926;', '% params.Q(7:9, 7:9) = params.Q(7:9, 7:9) * 0.926;');
    content = strrep(content, 'params.R_gps = params.R_gps * 1.370;', '% params.R_gps = params.R_gps * 1.370;');
    content = strrep(content, 'params.R_baro = params.R_baro * 0.956;', '% params.R_baro = params.R_baro * 0.956;');
    content = strrep(content, 'params.R_mag = params.R_mag * 1.115;', '% params.R_mag = params.R_mag * 1.115;');
    
    % Write back to file
    fid = fopen('parameters.m', 'w');
    fprintf(fid, '%s', content);
    fclose(fid);
    
    fprintf('Original parameters restored.\n');
end

%% Test 2: Original Parameters
fprintf('\n\nTEST 2: ORIGINAL PARAMETERS (Baseline)\n');
fprintf('---------------------------------------\n');
fprintf('Parameters: All scales = 1.0 (no optimization)\n');
fprintf('Running 30-second test...\n');

results_original = rapid_test_ekf('duration', 30, 'verbose', true);

% Store results
original_params = struct();
original_params.Q_scale = 1.0;
original_params.R_gps_scale = 1.0;
original_params.R_baro_scale = 1.0;
original_params.R_mag_scale = 1.0;
original_params.Q_att_scale = 1.0;
original_params.P_scale = 1.0;
original_params.results = results_original;

%% Create Comparison Report
fprintf('\n\n=== CREATING COMPARISON REPORT ===\n');

% Create markdown report
report_content = sprintf(['# EKF Parameter Comparison Report\n' ...
    'Generated: %s\n\n' ...
    '## Test Configuration\n' ...
    '- Test Duration: 30 seconds\n' ...
    '- Simulation: 9-state EKF with multi-rate sensor fusion\n' ...
    '- Test Method: rapid_test_ekf.m\n\n' ...
    '## Results Summary\n\n' ...
    '| Parameter Set | Position RMSE (m) | Velocity RMSE (m/s) | Attitude RMSE (deg) | Overall Score |\n' ...
    '|---------------|-------------------|---------------------|---------------------|---------------|\n' ...
    '| **Optimized** | %.3f | %.3f | %.2f | %.3f |\n' ...
    '| **Original**  | %.3f | %.3f | %.2f | %.3f |\n\n' ...
    '## Detailed Results\n\n' ...
    '### Optimized Parameters (Random Search)\n' ...
    '**Parameters:**\n' ...
    '- Q_scale: %.3f\n' ...
    '- R_gps_scale: %.3f\n' ...
    '- R_baro_scale: %.3f\n' ...
    '- R_mag_scale: %.3f\n' ...
    '- Q_att_scale: %.3f\n' ...
    '- P_scale: %.3f\n\n' ...
    '**Performance:**\n' ...
    '- Position RMSE: %.3f m (max: %.3f m)\n' ...
    '- Velocity RMSE: %.3f m/s (max: %.3f m/s)\n' ...
    '- Attitude RMSE: %.2f deg (max: %.2f deg)\n' ...
    '- Overall Score: %.3f\n' ...
    '- Attitude Penalty: %.1f\n' ...
    '- Simulation Time: %.2f seconds\n\n' ...
    '### Original Parameters (Baseline)\n' ...
    '**Parameters:**\n' ...
    '- Q_scale: %.3f\n' ...
    '- R_gps_scale: %.3f\n' ...
    '- R_baro_scale: %.3f\n' ...
    '- R_mag_scale: %.3f\n' ...
    '- Q_att_scale: %.3f\n' ...
    '- P_scale: %.3f\n\n' ...
    '**Performance:**\n' ...
    '- Position RMSE: %.3f m (max: %.3f m)\n' ...
    '- Velocity RMSE: %.3f m/s (max: %.3f m/s)\n' ...
    '- Attitude RMSE: %.2f deg (max: %.2f deg)\n' ...
    '- Overall Score: %.3f\n' ...
    '- Attitude Penalty: %.1f\n' ...
    '- Simulation Time: %.2f seconds\n\n' ...
    '## Analysis\n\n' ...
    '### Performance Comparison\n' ...
    '- **Position Accuracy:** %s (%.3f vs %.3f m)\n' ...
    '- **Velocity Accuracy:** %s (%.3f vs %.3f m/s)\n' ...
    '- **Attitude Accuracy:** %s (%.2f vs %.2f deg)\n' ...
    '- **Overall Performance:** %s (%.3f vs %.3f score)\n\n' ...
    '### Key Insights\n' ...
    '- %s\n' ...
    '- %s\n' ...
    '- %s\n\n' ...
    '## Recommendation\n' ...
    '%s\n\n' ...
    '---\n' ...
    '*Report generated by compare_parameters.m*'], ...
    datestr(now), ...
    results_optimized.pos_rmse, results_optimized.vel_rmse, results_optimized.att_rmse_deg, results_optimized.performance_score, ...
    results_original.pos_rmse, results_original.vel_rmse, results_original.att_rmse_deg, results_original.performance_score, ...
    optimized_params.Q_scale, optimized_params.R_gps_scale, optimized_params.R_baro_scale, optimized_params.R_mag_scale, optimized_params.Q_att_scale, optimized_params.P_scale, ...
    results_optimized.pos_rmse, results_optimized.pos_max_error, results_optimized.vel_rmse, results_optimized.vel_max_error, results_optimized.att_rmse_deg, results_optimized.att_max_error_deg, results_optimized.performance_score, results_optimized.attitude_penalty, results_optimized.sim_time, ...
    original_params.Q_scale, original_params.R_gps_scale, original_params.R_baro_scale, original_params.R_mag_scale, original_params.Q_att_scale, original_params.P_scale, ...
    results_original.pos_rmse, results_original.pos_max_error, results_original.vel_rmse, results_original.vel_max_error, results_original.att_rmse_deg, results_original.att_max_error_deg, results_original.performance_score, results_original.attitude_penalty, results_original.sim_time);

% Determine which is better for each metric
pos_better = results_optimized.pos_rmse < results_original.pos_rmse;
vel_better = results_optimized.vel_rmse < results_original.vel_rmse;
att_better = results_optimized.att_rmse_deg < results_original.att_rmse_deg;
overall_better = results_optimized.performance_score < results_original.performance_score;

pos_text = sprintf('Optimized %s', pos_better ? 'better' : 'worse');
vel_text = sprintf('Optimized %s', vel_better ? 'better' : 'worse');
att_text = sprintf('Optimized %s', att_better ? 'better' : 'worse');
overall_text = sprintf('Optimized %s', overall_better ? 'better' : 'worse');

% Generate insights
insights = {};
if att_better
    insights{end+1} = 'Optimized parameters provide better attitude tracking';
else
    insights{end+1} = 'Original parameters provide better attitude tracking';
end

if abs(results_optimized.att_rmse_deg - results_original.att_rmse_deg) < 1.0
    insights{end+1} = 'Attitude performance difference is minimal (< 1 degree)';
end

if overall_better
    insights{end+1} = 'Overall performance favors optimized parameters';
else
    insights{end+1} = 'Overall performance favors original parameters';
end

% Generate recommendation
if overall_better && (results_optimized.performance_score < results_original.performance_score * 0.95)
    recommendation = '**RECOMMENDATION: Use optimized parameters** - Significant improvement in overall performance';
elseif ~overall_better && (results_original.performance_score < results_optimized.performance_score * 0.95)
    recommendation = '**RECOMMENDATION: Use original parameters** - Better performance with proven stability';
else
    recommendation = '**RECOMMENDATION: Either parameter set is acceptable** - Performance difference is minimal';
end

% Complete the report
report_content = sprintf([report_content ...
    '### Performance Comparison\n' ...
    '- **Position Accuracy:** %s (%.3f vs %.3f m)\n' ...
    '- **Velocity Accuracy:** %s (%.3f vs %.3f m/s)\n' ...
    '- **Attitude Accuracy:** %s (%.2f vs %.2f deg)\n' ...
    '- **Overall Performance:** %s (%.3f vs %.3f score)\n\n' ...
    '### Key Insights\n' ...
    '- %s\n' ...
    '- %s\n' ...
    '- %s\n\n' ...
    '## Recommendation\n' ...
    '%s\n\n' ...
    '---\n' ...
    '*Report generated by compare_parameters.m*'], ...
    pos_text, results_optimized.pos_rmse, results_original.pos_rmse, ...
    vel_text, results_optimized.vel_rmse, results_original.vel_rmse, ...
    att_text, results_optimized.att_rmse_deg, results_original.att_rmse_deg, ...
    overall_text, results_optimized.performance_score, results_original.performance_score, ...
    insights{1}, insights{2}, insights{3}, recommendation);

% Write report to file
timestamp = datestr(now, 'yyyymmdd_HHMMSS');
filename = sprintf('EKF_Parameter_Comparison_%s.md', timestamp);
fid = fopen(filename, 'w');
fprintf(fid, '%s', report_content);
fclose(fid);

fprintf('Comparison report saved to: %s\n', filename);

%% Restore Optimized Parameters
fprintf('\nRestoring optimized parameters...\n');
fid = fopen('parameters.m', 'r');
content = fread(fid, '*char')';
fclose(fid);

% Restore the optimized section
content = strrep(content, '%% 5.1. OPTIMIZED PARAMETERS (COMMENTED OUT FOR TESTING)', '%% 5.1. APPLY OPTIMIZED PARAMETERS (Score: 5.715 - Much Better!)');
content = strrep(content, '% params.Q = params.Q * 1.377;', 'params.Q = params.Q * 1.377;');
content = strrep(content, '% params.Q(7:9, 7:9) = params.Q(7:9, 7:9) * 0.926;', 'params.Q(7:9, 7:9) = params.Q(7:9, 7:9) * 0.926;');
content = strrep(content, '% params.R_gps = params.R_gps * 1.370;', 'params.R_gps = params.R_gps * 1.370;');
content = strrep(content, '% params.R_baro = params.R_baro * 0.956;', 'params.R_baro = params.R_baro * 0.956;');
content = strrep(content, '% params.R_mag = params.R_mag * 1.115;', 'params.R_mag = params.R_mag * 1.115;');

fid = fopen('parameters.m', 'w');
fprintf(fid, '%s', content);
fclose(fid);

fprintf('Optimized parameters restored.\n');
fprintf('\n=== COMPARISON COMPLETE ===\n');
fprintf('Report saved to: %s\n', filename);
